// Node.js의 기본 모듈들을 가져옵니다.
const fs = require("fs");
const path = require("path");

// --- 설정 부분 ---

// 1. 이미지가 저장된 폴더 경로를 지정합니다.
//    이 스크립트는 Watchpoint/scripts/ 폴더에 있으므로, 상대 경로를 사용합니다.
const imageDirPath = path.join(
  __dirname,
  "../frontend/public/images/game_hero/hero_portrait"
);

// 2. 생성될 index.ts 파일의 경로를 지정합니다.
const outputPath = path.join(imageDirPath, "index.ts");

// --- 메인 로직 ---

try {
  // 3. 이미지 폴더에 있는 모든 파일 목록을 읽어옵니다.
  const files = fs.readdirSync(imageDirPath);

  // 4. 이미지 파일(.png, .jpg 등)만 필터링합니다.
  const imageFiles = files.filter((file) =>
    /\.(png|jpe?g|svg|webp)$/.test(file)
  );

  // 5. index.ts 파일에 작성될 내용을 만듭니다.
  let importStatements = "";
  let exportObjectEntries = "";

  imageFiles.forEach((file) => {
    // 파일 이름에서 확장자를 제거하여 변수 이름으로 사용합니다.
    // 예: 'ana.png' -> 'ana'
    const variableName = path.parse(file).name;

    // import 구문 생성
    importStatements += `import ${variableName} from './${file}';\n`;

    // export 객체에 들어갈 항목 생성
    exportObjectEntries += `    ${variableName},\n`;
  });

  // 최종 파일 내용 조합
  const fileContent = `// This file is auto-generated by generateHeroExports.js. Do not edit manually.

${importStatements}
const heroPortraits = {
${exportObjectEntries}};

export default heroPortraits;
`;

  // 6. 생성된 내용으로 index.ts 파일을 씁니다.
  fs.writeFileSync(outputPath, fileContent, "utf8");

  console.log(`✅ Successfully generated ${outputPath}`);
  console.log(`Total ${imageFiles.length} images exported.`);
} catch (error) {
  console.error("❌ Error generating hero exports:", error);
}
