const fs = require("fs");
const path = require("path");

// --- 설정 부분 ---
const rootImageDir = path.join(
  __dirname,
  "../frontend/public/images/game_team"
);
const outputPath = path.join(rootImageDir, "index2.ts");

try {
  // 1. game_team 폴더 아래의 모든 팀 폴더 목록을 읽어옵니다.
  const teams = fs
    .readdirSync(rootImageDir)
    .filter((file) => fs.statSync(path.join(rootImageDir, file)).isDirectory());

  let importStatements = "";
  const exportObject = {};

  teams.forEach((teamName) => {
    // 팀 이름에서 공백이나 특수문자를 제거하여 객체의 키로 사용
    const sanitizedTeamName = teamName.replace(/[^a-zA-Z0-9]/g, "");
    exportObject[sanitizedTeamName] = { players: {} };

    const playersDir = path.join(rootImageDir, teamName, "players");

    // players 폴더가 존재하는지 확인
    if (fs.existsSync(playersDir)) {
      // 2. players 폴더 안의 모든 파일 목록을 읽어옵니다.
      const playerImageFiles = fs
        .readdirSync(playersDir)
        .filter((file) => /\.(png|jpe?g|svg|webp)$/.test(file));

      playerImageFiles.forEach((imageFile) => {
        // 3. 파일 이름에서 확장자와 불필요한 부분을 제거하여 선수 이름(ID)으로 사용합니다.
        // 예: 'chiyo_한현석.webp' -> 'chiyo'
        // 예: 'proper_김동현2.webp' -> 'proper'
        const playerName = path
          .parse(imageFile)
          .name.split("_")[0]
          .replace(/\d+$/, "");

        // 4. import 변수 이름은 중복되지 않도록 팀명과 선수명을 조합합니다.
        const importName = `${sanitizedTeamName}_${playerName}`;
        const importPath = `./${teamName}/players/${imageFile}`;

        // 5. import 구문과 export 객체를 만듭니다.
        //    중복된 선수 이름(proper, proper2)이 있을 경우, 마지막 파일로 덮어쓰게 됩니다.
        //    만약 모든 버전을 다루고 싶다면 로직이 더 복잡해집니다.
        if (!exportObject[sanitizedTeamName].players[playerName]) {
          // 중복 방지
          importStatements += `import ${importName} from '${importPath}';\n`;
          exportObject[sanitizedTeamName].players[playerName] = importName;
        }
      });
    }
  });

  // JavaScript 객체를 문자열로 변환하여 파일에 쓸 준비
  let exportString = JSON.stringify(exportObject, null, 4)
    .replace(/"([^"]+)":/g, "$1:")
    .replace(/"([^"]+)"/g, "$1");

  const fileContent = `// This file is auto-generated by generatePlayerImages.js. Do not edit manually.

${importStatements}
const teamPlayerData = ${exportString};

export default teamPlayerData;
`;

  fs.writeFileSync(outputPath, fileContent, "utf8");
  console.log(`✅ Successfully generated ${outputPath}`);
} catch (error) {
  console.error("❌ Error generating player image exports:", error);
}
